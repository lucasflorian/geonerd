{"version":3,"sources":["app.js","country-nerd.js","flag-nerd.js","navigation.js","settings.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["class GeoNerdApp {\n\tconstructor(props) {\n\t\tdocument.addEventListener(\"DOMContentLoaded\", () => {\n\t\t\tthis.countries = [];\n\t\t\tthis.countriesByLetter = {};\n\t\t\tthis.letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"y\", \"z\"];\n\t\t\tthis.loadCountries(() => {\n\t\t\t\tnew GeoNerdNavigation();\n\t\t\t\tnew CountryNerd();\n\t\t\t\tnew FlagNerd();\n\t\t\t});\n\t\t\tnew Settings();\n\t\t});\n\t}\n\n\tloadCountries(callback) {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.overrideMimeType(\"application/json\");\n\t\trequest.open('GET', '/data/countries-fr.json', true);\n\t\trequest.onreadystatechange = () => {\n\t\t\tif (request.readyState === 4 && request.status === 200) {\n\t\t\t\tJSON.parse(request.responseText).forEach(country => {\n\t\t\t\t\tconst letter = GeoNerdApp.sanitize(country.name.substr(0, 1));\n\t\t\t\t\tif (!this.countriesByLetter[letter]) {\n\t\t\t\t\t\tthis.countriesByLetter[letter] = [];\n\t\t\t\t\t}\n\t\t\t\t\tthis.countriesByLetter[letter].push({\n\t\t\t\t\t\tsanitize: GeoNerdApp.sanitize(country.name),\n\t\t\t\t\t\tname: country.name,\n\t\t\t\t\t\tcode: country.code\n\t\t\t\t\t});\n\t\t\t\t\tthis.countries.push({\n\t\t\t\t\t\tsanitize: GeoNerdApp.sanitize(country.name),\n\t\t\t\t\t\tname: country.name,\n\t\t\t\t\t\tcode: country.code\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\t\trequest.send(null);\n\t}\n\n\tstatic sanitize(value) {\n\t\treturn value.toLowerCase().normalize(\"NFD\")\n\t\t\t.replace(/[\\u0300-\\u036f]/g, \"\")\n\t\t\t.replace(/-/g, \" \")\n\t\t\t.replace(/'/g, \" \")\n\t\t\t.replace(/â€™/g, \" \");\n\t}\n}\n\nconst geoNerdApp = new GeoNerdApp();\n","class CountryNerd {\n\tconstructor() {\n\t\tthis.currentLetter = \"a\";\n\t\tthis.countriesFound = 0;\n\t\tthis.loadCountries();\n\n\t\tthis.firstAnswer = document.querySelector(\".answers .answer\");\n\t\tthis.answers = document.querySelector(\".answers\");\n\t\tthis.answerContainer = document.querySelector(\".answer-container\");\n\t\tthis.answerInput = document.querySelector(\"#country-answer-input\");\n\t\tthis.answerButton = document.querySelector(\"#country-answer-validate\");\n\t\tthis.letters = document.querySelectorAll(\".letter\");\n\t\tthis.wonLink = document.querySelector(\".won-link\");\n\t\tthis.tipCurrent = document.querySelector(\".tip .found\");\n\t\tthis.tipTotal = document.querySelector(\".tip .total\");\n\n\t\tthis.buildLetters();\n\t\tthis.buildInputs();\n\t}\n\n\tbuildLetters() {\n\t\tconst letterPlaceholder = document.querySelector(\".letter-placeholder\");\n\t\tconst mainTitle = document.querySelector(\".country-nerd h1\");\n\t\tconst gameTitle = document.querySelector(\".game-title\");\n\t\tconst lettersContainer = document.querySelector(\".letters\");\n\n\t\tthis.letters.forEach(letter => {\n\t\t\tconst letterText = letter.innerHTML.toLowerCase();\n\t\t\tif (localStorage.getItem(\"countrynerd.letter.\" + letterText) === \"true\") {\n\t\t\t\tletter.classList.add(\"completed\");\n\t\t\t}\n\t\t\tletter.addEventListener(\"click\", () => {\n\t\t\t\tthis.currentLetter = letterText;\n\t\t\t\tlocation.hash = \"#country-nerd-\" + letterText;\n\t\t\t\tlettersContainer.classList.add(\"hide\");\n\t\t\t\tgsap.to(mainTitle, {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\tpointerEvents: \"none\",\n\t\t\t\t\tdelay: 0.2\n\t\t\t\t});\n\t\t\t\tgsap.to(gameTitle, {\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tdelay: 0.5\n\t\t\t\t});\n\t\t\t\tletterPlaceholder.innerHTML = letterText;\n\t\t\t\tthis.tipTotal.innerHTML = geoNerdApp.countriesByLetter[this.currentLetter].length;\n\t\t\t\tthis.firstAnswer.innerHTML = letterText;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tlettersContainer.style.display = \"none\";\n\t\t\t\t\tthis.answerContainer.style.display = \"flex\";\n\t\t\t\t\tgsap.to(this.answerContainer, {\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tdelay: 0.1\n\t\t\t\t\t});\n\t\t\t\t\tthis.answerInput.focus();\n\t\t\t\t}, 400);\n\t\t\t});\n\t\t});\n\t}\n\n\tloadCountries() {\n\n\t}\n\n\tbuildInputs() {\n\t\tthis.answerInput.addEventListener(\"change\", e => {\n\t\t\tthis.validateAnswer(e.target.value);\n\t\t});\n\t\tthis.answerButton.addEventListener(\"click\", e => {\n\t\t\tthis.validateAnswer(this.answerInput.value);\n\t\t});\n\t}\n\n\tvalidateAnswer(answer) {\n\t\tanswer = GeoNerdApp.sanitize(answer);\n\t\tlet win = false;\n\t\tgeoNerdApp.countriesByLetter[this.currentLetter].forEach(country => {\n\t\t\tif (answer === country.sanitize && !country.found) {\n\t\t\t\twin = true;\n\t\t\t\tthis.answerInput.value = \"\";\n\t\t\t\tcountry.found = true;\n\t\t\t\tconst rightAnswer = document.querySelector(\".answers .answer:first-child\");\n\t\t\t\trightAnswer.innerHTML = `${country.name}<span class=\"flag ${country.code}\"></span>`;\n\t\t\t\trightAnswer.classList.add(\"valid\");\n\t\t\t\tthis.countriesFound++;\n\t\t\t\tthis.tipCurrent.innerHTML = this.countriesFound;\n\t\t\t\tif (this.countriesFound === geoNerdApp.countriesByLetter[this.currentLetter].length) {\n\t\t\t\t\tthis.finished = true;\n\t\t\t\t}\n\t\t\t\tgsap.to(this.answerInput,{\n\t\t\t\t\tbackgroundColor: \"#25961c\",\n\t\t\t\t\tduration: 0.2,\n\t\t\t\t\tonComplete: ()=>{\n\t\t\t\t\t\tgsap.to(this.answerInput, {\n\t\t\t\t\t\t\tbackgroundColor: \"white\",\n\t\t\t\t\t\t\tduration: 0.2\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tif (win) {\n\t\t\tif (this.finished) {\n\t\t\t\tthis.wonLink.classList.add(\"show\");\n\t\t\t\tthis.answerContainer.classList.add(\"win\");\n\t\t\t\tlocalStorage.setItem(\"countrynerd.letter.\" + this.currentLetter, \"true\");\n\t\t\t} else {\n\t\t\t\tthis.answers.insertAdjacentHTML(\"afterbegin\", `<div class=\"answer\">${this.currentLetter}</div>`);\n\t\t\t}\n\t\t} else {\n\n\t\t\tgsap.to(this.answerInput,{\n\t\t\t\tbackgroundColor: \"#F05050\",\n\t\t\t\tduration: 0.2,\n\t\t\t\tonComplete: ()=>{\n\t\t\t\t\tgsap.to(this.answerInput, {\n\t\t\t\t\t\tbackgroundColor: \"white\",\n\t\t\t\t\t\tduration: 0.2\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.answerInput.value = \"\";\n\t\t}\n\t}\n\n\n}\n","class FlagNerd {\n\tconstructor() {\n\t\tthis.flagContainer = document.querySelector(\".flag-nerd .flag-container\");\n\t\tthis.answerContainer = document.querySelector(\".flag-nerd .answer-container\");\n\t\tthis.attempts = parseInt(localStorage.getItem(\"flagnerd.attempts\")) || 0;\n\t\tthis.countriesLeft = JSON.parse(localStorage.getItem(\"flagnerd.countriesleft\"));\n\t\tif (this.countriesLeft) {\n\n\t\t\tif (this.countriesLeft.length === 0 ){\n\t\t\t\tdocument.querySelector(\".flag-nerd .win\").classList.add(\"show\");\n\t\t\t\tthis.updateProgress();\n\t\t\t\tthis.updateAttempts();\n\t\t\t\treturn\n\t\t\t}\n\t\t} else {\n\t\t\tthis.countriesLeft = [];\n\t\t\tgeoNerdApp.countries.forEach(country => {\n\t\t\t\tthis.countriesLeft.push(country);\n\t\t\t});\n\t\t}\n\t\tthis.updateStorage();\n\t\tthis.updateAttempts();\n\t\tthis.guessFlag();\n\t}\n\n\tguessFlag() {\n\t\tthis.updateProgress();\n\t\tthis.rightAnswer = this.countriesLeft[Math.floor(Math.random() * this.countriesLeft.length)];\n\t\tconst proposals = [];\n\t\tgeoNerdApp.countries.forEach(country => {\n\t\t\tif (country.code === this.rightAnswer.code) {\n\t\t\t\tthis.flagContainer.insertAdjacentHTML(\"afterbegin\", `<span class=\"flag ${country.code}\"></span>`);\n\t\t\t\tproposals.push({\"code\": country.code, \"name\": country.name});\n\t\t\t}\n\t\t});\n\t\tconst maxLength = this.countriesLeft.length < 4 ? this.countriesLeft.length : 4;\n\t\twhile (proposals.length < maxLength) {\n\t\t\tconst proposal = this.countriesLeft[Math.floor(Math.random() * this.countriesLeft.length)];\n\t\t\tif (proposal.code !== this.rightAnswer.code) {\n\t\t\t\tlet duplicate = false;\n\t\t\t\tproposals.forEach(prop => {\n\t\t\t\t\tif(prop.code === proposal.code){\n\t\t\t\t\t\tduplicate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(!duplicate){\n\t\t\t\t\tproposals.push({\"code\": proposal.code, \"name\": proposal.name});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.shuffle(proposals);\n\t\tproposals.forEach(proposal => {\n\t\t\tthis.answerContainer.insertAdjacentHTML(\"beforeend\", `<div class=\"country\" data-country-code=\"${proposal.code}\">${proposal.name}</div>`);\n\t\t});\n\t\tthis.guess();\n\t}\n\n\tshuffle(array) {\n\t\tlet currentIndex = array.length, randomIndex;\n\t\twhile (currentIndex !== 0) {\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex--;\n\t\t\t[array[currentIndex], array[randomIndex]] = [\n\t\t\t\tarray[randomIndex], array[currentIndex]];\n\t\t}\n\t\treturn array;\n\t}\n\n\tguess() {\n\t\tthis.answerContainer.style.pointerEvents = \"initial\";\n\t\tdocument.querySelectorAll(\".flag-nerd .country\").forEach(guess => {\n\t\t\tguess.addEventListener(\"click\", () => {\n\t\t\t\tthis.updateAttempts(true);\n\t\t\t\tif (guess.dataset.countryCode === this.rightAnswer.code) {\n\t\t\t\t\tguess.classList.add(\"valid\");\n\t\t\t\t\tthis.countriesLeft = this.countriesLeft.filter(elem => elem.code !== this.rightAnswer.code);\n\t\t\t\t\tthis.updateStorage();\n\t\t\t\t} else {\n\t\t\t\t\tdocument.querySelector(`[data-country-code=\"${this.rightAnswer.code}\"]`).classList.add(\"valid\");\n\t\t\t\t\tguess.classList.add(\"invalid\");\n\t\t\t\t}\n\t\t\t\tthis.answerContainer.style.pointerEvents = \"none\";\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tgsap.to(this.flagContainer, {\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tonComplete: () => {\n\t\t\t\t\t\t\tthis.flagContainer.innerHTML = \"\";\n\t\t\t\t\t\t\tthis.flagContainer.style.opacity = \"1\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tgsap.to(this.answerContainer, {\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tonComplete: () => {\n\t\t\t\t\t\t\tthis.answerContainer.innerHTML = \"\";\n\t\t\t\t\t\t\tthis.answerContainer.style.opacity = \"1\";\n\t\t\t\t\t\t\tthis.guessFlag();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 700);\n\t\t\t});\n\t\t});\n\t}\n\n\tupdateStorage() {\n\t\tlocalStorage.setItem(\"flagnerd.countriesleft\", JSON.stringify(this.countriesLeft));\n\t}\n\n\tupdateProgress() {\n\t\tdocument.querySelector(\".flag-nerd .progress .found\").innerHTML = (geoNerdApp.countries.length - this.countriesLeft.length).toString();\n\t\tdocument.querySelector(\".flag-nerd .progress .total\").innerHTML = geoNerdApp.countries.length.toString();\n\t}\n\n\tupdateAttempts(increase) {\n\t\tif (increase) {\n\t\t\tthis.attempts++;\n\t\t}\n\t\tdocument.querySelector(\".flag-nerd .attempts .number\").innerHTML = this.attempts;\n\t\tlocalStorage.setItem(\"flagnerd.attempts\", this.attempts);\n\t}\n\n\tincreaseAttempts() {\n\n\t}\n}\n\n","class GeoNerdNavigation {\n\tconstructor() {\n\t\tthis.pages = document.querySelectorAll(\".pages .page\");\n\n\t\tthis.changePage();\n\n\t\twindow.addEventListener(\"hashchange\", e => {\n\t\t\tthis.changePage();\n\t\t});\n\t}\n\n\tchangePage() {\n\t\tlet navTo = location.hash;\n\t\tif (!navTo){\n\t\t\tnavTo = \"#home\";\n\t\t}\n\t\tconst nextPage = document.querySelector(navTo);\n\t\tif (nextPage) {\n\t\t\tthis.pages.forEach(page => {\n\t\t\t\tpage.classList.remove(\"active\");\n\t\t\t});\n\t\t\tnextPage.classList.add(\"active\");\n\t\t}\n\t}\n}\n","class Settings {\n\tconstructor() {\n\t\tthis.settingPage = document.querySelector(\".page.settings\");\n\t\tthis.clearCountryNerd();\n\t\tthis.clearFlagNerd();\n\t}\n\n\tclearCountryNerd() {\n\t\tthis.settingPage.querySelector(\".clear-country-nerd\").addEventListener(\"click\", e => {\n\t\t\tgeoNerdApp.letters.forEach(letter => {\n\t\t\t\tlocalStorage.removeItem(\"countrynerd.letter.\" + letter);\n\t\t\t});\n\t\t\te.target.classList.add(\"done\");\n\t\t});\n\t}\n\n\tclearFlagNerd() {\n\t\tthis.settingPage.querySelector(\".clear-flag-nerd\").addEventListener(\"click\", e => {\n\t\t\tlocalStorage.removeItem(\"flagnerd.countriesleft\");\n\t\t\tlocalStorage.removeItem(\"flagnerd.attempts\");\n\t\t\te.target.classList.add(\"done\");\n\t\t});\n\t}\n}\n"]}